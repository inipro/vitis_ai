From 3b3a5cff8d5cd586596cf521975d273eb7c6f902 Mon Sep 17 00:00:00 2001
From: Hyunok Kim <hokim@inipro.net>
Date: Fri, 27 Nov 2020 10:13:39 +0900
Subject: [PATCH] Patch the kernel to manipulate the wifi part's pins

Signed-off-by: Hyunok Kim <hokim@inipro.net>
---
 drivers/mmc/core/pwrseq_simple.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/drivers/mmc/core/pwrseq_simple.c b/drivers/mmc/core/pwrseq_simple.c
index ea4d3670560e..6ce3a51e392d 100644
--- a/drivers/mmc/core/pwrseq_simple.c
+++ b/drivers/mmc/core/pwrseq_simple.c
@@ -112,6 +112,33 @@ static int mmc_pwrseq_simple_probe(struct platform_device *pdev)
 {
 	struct mmc_pwrseq_simple *pwrseq;
 	struct device *dev = &pdev->dev;
+    struct gpio_desc *gpio_chip_en;
+    struct gpio_desc *gpio_resetn;
+
+    // Leave resetn low and let pwrseq take care of it
+    gpio_resetn = gpiod_get(dev, "reset", GPIOD_ASIS);
+    if (IS_ERR(gpio_resetn)) {
+            dev_warn(dev,
+               "mmc failed to get default resetn GPIO\n");
+    } else {
+            dev_info(dev, "mmc succesfully got gpio_resetn\n");
+            gpiod_direction_output(gpio_resetn, 1);  // low
+            gpiod_put(gpio_resetn);
+    }
+
+    // Turn power off then back on
+    gpio_chip_en = gpiod_get(dev, "chip_en", GPIOD_ASIS);
+    if (IS_ERR(gpio_chip_en)) {
+            dev_warn(dev,
+               "mmc failed to get default chip_en GPIO\n");
+    } else {
+            dev_info(dev, "mmc succesfully got gpio_chip_en\n");
+            gpiod_direction_output(gpio_chip_en, 1);  // low (chip off)
+            mdelay(5);
+            gpiod_set_value(gpio_chip_en, 0); // high (chip on)
+            gpiod_put(gpio_chip_en);
+            mdelay(5);
+    }
 
 	pwrseq = devm_kzalloc(dev, sizeof(*pwrseq), GFP_KERNEL);
 	if (!pwrseq)
-- 
2.17.1

